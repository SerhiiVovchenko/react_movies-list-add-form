{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","required","onChange","textError","useState","Math","random","toString","slice","id","touched","setToched","hasError","htmlFor","classNames","type","placeholder","event","target","onBlur","NewMovie","onAdd","count","setCount","setTitle","setDescription","setImageNewUrl","setNewImdbUrl","setNewImdbId","setTextError","pattern","isUrlValid","url","match","isValidData","onSubmit","preventDefault","Error","prevCount","disabled","App","moviesFromServer","updateMovies","setUpdateMovies","prevMovie","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6e633d1a.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  required?: boolean,\n  onChange?: (newValue: string) => void,\n  textError?: string,\n};\n\nfunction getRandomDigits() {\n  return Math.random().toString().slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  required = false,\n  onChange = () => {},\n  textError,\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  // To show errors only if the field was touched (onBlur)\n  const [touched, setToched] = useState(false);\n  const hasError = touched && required && !value;\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          type=\"text\"\n          placeholder={`Enter ${label}`}\n          value={value}\n          onChange={event => onChange(event.target.value)}\n          onBlur={() => setToched(true)}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{textError ? label + textError : `${label} is required`}</p>\n      )}\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  onAdd: (movie: Movie) => void;\n};\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  const [count, setCount] = useState(0);\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [imgUrl, setImageNewUrl] = useState('');\n  const [imdbUrl, setNewImdbUrl] = useState('');\n  const [imdbId, setNewImdbId] = useState('');\n  const [textError, setTextError] = useState(' is required');\n\n  // eslint-disable-next-line max-len\n  const pattern = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/;\n  const isUrlValid = (url: string) => url.match(pattern);\n  const isValidData = title && imgUrl && imdbUrl && imdbId;\n\n  const clearTheForm = () => {\n    setTitle('');\n    setDescription('');\n    setImageNewUrl('');\n    setNewImdbUrl('');\n    setNewImdbId('');\n  };\n\n  const clearWrongFields = () => {\n    setTextError(' invalid. Please try again.');\n    setImageNewUrl('');\n    setNewImdbUrl('');\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    if (!isUrlValid(imgUrl) || !isUrlValid(imdbUrl)) {\n      clearWrongFields();\n\n      throw new Error('Invalid Url');\n    }\n\n    setCount(prevCount => prevCount + 1);\n\n    const newMovie = {\n      title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n    };\n\n    onAdd(newMovie);\n    clearTheForm();\n  };\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={handleSubmit}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={title}\n        onChange={setTitle}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={description}\n        onChange={setDescription}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={imgUrl}\n        onChange={setImageNewUrl}\n        required\n        textError={textError}\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={imdbUrl}\n        onChange={setNewImdbUrl}\n        required\n        textError={textError}\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={imdbId}\n        onChange={setNewImdbId}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={!isValidData}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import './App.scss';\nimport { useState } from 'react';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [updateMovies, setUpdateMovies] = useState<Movie[]>(moviesFromServer);\n  const addNewMovie = (movie: Movie) => {\n    setUpdateMovies(prevMovie => (\n      [...prevMovie, movie]\n    ));\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={updateMovies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={addNewMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}